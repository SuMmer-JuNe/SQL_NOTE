# Task1：初识数据库与SQL

1. 数据库（Database，DB）：将大量数据保存起来，通过计算机加工而成的可以 进行高效访问的数据集合。

   数据库管理系统（Database Management System，DBMS）：用来管理数据库的计算机系统。

2. DBMS 主要通过数据的保存格式（数据库的种类）来进行分类，主要有5类：

- 层次数据库（Hierarchical Database，HDB）
- 关系数据库（Relational Database，RDB）
- 面向对象数据库（Object Oriented Database，OODB）
- XML数据库（XML Database，XMLDB）
- 键值存储系统（Key-Value Store，KVS），举例：MongoDB

3. RDBMS的常见系统结构

![img](https://img.alicdn.com/imgextra/i2/O1CN01kROUDI22ITX6Evayf_!!6000000007097-0-tps-567-333.jpg)

4. SQL语句的分类：

   DDL（Data Definition Language，数据定义语言） 用来创建或者删除存储数据用的数据库以及数据库中的表等对象。DDL 包含以下几种指令。

   - CREATE ： 创建数据库和表等对象
   - DROP ： 删除数据库和表等对象
   - ALTER ： 修改数据库和表等对象的结构

   DML（Data Manipulation Language，数据操纵语言） 用来查询或者变更表中的记录。DML 包含以下几种指令。

   - SELECT ：查询表中的数据
   - INSERT ：向表中插入新数据
   - UPDATE ：更新表中的数据
   - DELETE ：删除表中的数据

   DCL（Data Control Language，数据控制语言） 用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对 RDBMS 的用户是否有权限操作数据库中的对象（数据库表等）进行设定。DCL 包含以下几种指令。

   - COMMIT ： 确认对数据库中的数据进行的变更
   - ROLLBACK ： 取消对数据库中的数据进行的变更
   - GRANT ： 赋予用户操作权限
   - REVOKE ： 取消用户的操作权限

5. 常用操作

   创建数据库：CREATE DATABASE < 数据库名称 > ;

   创建表：CREATE TABLE < 表名 > ( < 列名 1> < 数据类型 > < 该列所需约束 > ,  < 列名 2> < 数据类型 > < 该列所需约束 >,  .  .  .  < 该表的约束 1> , < 该表的约束 2> ,……);

   删除表：DROP TABLE < 表名 > ;

   添加列：ALTER TABLE < 表名 > ADD COLUMN < 列的定义 >;

   删除列：ALTER TABLE < 表名 > DROP COLUMN < 列名 >;

   清空表内容：TRUNCATE TABLE TABLE_NAME;

   （优点：相比`drop``/``delete`，`truncate`用来清除数据时，速度最快。）

   更新数据：

   ```sql
   UPDATE <表名> 
   SET <列名> = <表达式> [, <列名2>=<表达式2>...];   
   WHERE <条件>;  -- 可选，非常重要。 
   ORDER BY 子句;  --可选 
   LIMIT 子句; --可选
   ```

   注意：只有未设置 NOT NULL 约束和主键约束的列才可以清空为NULL。

   插入语句：INSERT INTO <表名> (列1, 列2, 列3, ……) VALUES (值1, 值2, 值3, ……);  

   对表进行全列 INSERT 时，可以省略表名后的列清单。这时 VALUES子句的值会默认按照从左到右的顺序赋给每一列。

   原则上，执行一次 INSERT 语句会插入一行数据。插入多行时，通常需要循环执行相应次数的 INSERT 语句。其实很多 RDBMS 都支持一次插入多行数据

   ```sql
   -- 通常的INSERT
   INSERT INTO productins VALUES ('0002', '打孔器', 
   '办公用品', 500, 320, '2009-09-11');
   INSERT INTO productins VALUES ('0003', '运动T恤', 
   '衣服', 4000, 2800, NULL);
   INSERT INTO productins VALUES ('0004', '菜刀', 
   '厨房用具', 3000, 2800, '2009-09-20');
   -- 多行INSERT （ DB2、SQL、SQL Server、 PostgreSQL 和 MySQL多行插入）
   INSERT INTO productins VALUES ('0002', '打孔器', 
   '办公用品', 500, 320, '2009-09-11'),
   ('0003', '运动T恤', '衣服', 4000, 2800, NULL),
   ('0004', '菜刀', '厨房用具', 3000, 2800, '2009-09-20');  
   -- Oracle中的多行INSERT
   INSERT ALL INTO productins VALUES ('0002', '打孔器', '办公用品', 500, 320, '2009-09-11')
   INTO productins VALUES ('0003', '运动T恤', '衣服', 4000, 2800, NULL)
   INTO productins VALUES ('0004', '菜刀', '厨房用具', 3000, 2800, '2009-09-20')
   SELECT * FROM DUAL;  
   -- DUAL是Oracle特有（安装时的必选项）的一种临时表A。因此“SELECT *FROM DUAL” 部分也只是临时性的，并没有实际意义。  
   ```

   可以向表中插入默认值（初始值）。可以通过在创建表的CREATE TABLE 语句中设置DEFAULT约束来设定默认值：

   ```sql
   CREATE TABLE productins
   (product_id CHAR(4) NOT NULL,
   （略）
   sale_price INTEGER
   （略）	DEFAULT 0, -- 销售单价的默认值设定为0;
   PRIMARY KEY (product_id)); 
   ```

   使用INSERT … SELECT 语句从其他表复制数据：

   ```sql
   -- 将商品表中的数据复制到商品复制表中
   INSERT INTO productocpy (product_id, product_name, product_type, sale_price, purchase_price, regist_date)
   SELECT product_id, product_name, product_type, sale_price, 
   purchase_price, regist_date
   FROM Product;  
   ```

   命名规则：只能使用半角英文字母、数字、下划线作为数据库、表和列的名称；名称必须以半角英文字母开头。

6. 数据类型

   四种最基本的数据类型：

   - INTEGER 型：用来指定存储整数的列的数据类型（数字型），不能存储小数。
   - CHAR 型：用来存储定长字符串，当列中存储的字符串长度达不到最大长度的时候，使用半角空格进行补足，由于会浪费存储空间，所以一般不使用。
   - VARCHAR 型：用来存储可变长度字符串，定长字符串在字符数未达到最大长度时会用半角空格补足，但可变长字符串不同，即使字符数未达到最大长度，也不会用半角空格补足。
   - DATE 型：用来指定存储日期（年月日）的列的数据类型（日期型）。

7. 约束的设置

   `NOT NULL`是非空约束，即该列必须输入数据。

   `PRIMARY KEY`是主键约束，代表该列是唯一值，可以通过该列取出特定的行的数据。

练习：

1. 编写一条 CREATE TABLE 语句，用来创建一个包含表中所列各项的表 Addressbook （地址簿），并为 regist_no （注册编号）列设置主键约束

   ![img](https://img.alicdn.com/imgextra/i2/O1CN01yUhR8r1b2S3GHfh4B_!!6000000003407-2-tps-653-319.png)

   ```sql
   CREATE TABLE Addressbook(
   	regist_no int NOT NULL,
   	name VARCHAR(128) NOT NULL,
   	address VARCHAR(256) NOT NULL,
   	tel_no CHAR(10),
   	mail_address CHAR(20),
   	PRIMARY KEY(regist_no)
   );
   ```

2. 假设在创建练习1中的 Addressbook 表时忘记添加如下一列 postal_code （邮政编码）了，请把此列添加到 Addressbook 表中。

   列名 ： postal_code

   数据类型 ：定长字符串类型（长度为 8）

   约束 ：不能为 NULL

   ```sql
   ALTER TABLE Addressbook ADD postal_code CHAR(8) NOT NULL;
   ```

3. 编写 SQL 语句来删除 Addressbook 表。

   ```sql
   DROP TABLE Addressbook;
   ```

4. 编写 SQL 语句

  删除后的表无法恢复，需要重建。
