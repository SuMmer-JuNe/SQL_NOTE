1. 窗口函数也称为OLAP函数（OnLine AnalyticalProcessing），意思是对数据库数据进行实时分析处理。

2. 通用形式：

   ```sql
   <窗口函数> OVER ([PARTITION BY <列名>]
                        ORDER BY <排序用列名>) 
   ```

   关键字：PARTITION BY和ORDER BY

   **PARTITON BY**用来分组，即选择要看哪个窗口，类似于GROUP BY 子句，但是PARTITION BY 子句并不具备GROUP BY 子句的汇总功能，不会改变原始表中记录的行数。

   **ORDER BY**用来排序，即决定窗口内，按哪种规则(字段)排序。

3. 举例

   ```sql
   SELECT product_name
          ,product_type
          ,sale_price
          ,RANK() OVER (PARTITION BY product_type
                            ORDER BY sale_price) AS ranking
     FROM product  
   ```

   结果是:

   ![图片](https://img.alicdn.com/imgextra/i4/O1CN01hMPJM61V3TF4JmnmT_!!6000000002597-2-tps-800-317.png)

   说明：

   ![图片](https://img.alicdn.com/imgextra/i1/O1CN01zRGM7Q1QPqVqS4cVW_!!6000000001969-2-tps-862-572.png)

4. 窗口函数种类：

   一是 将SUM、MAX、MIN等聚合函数用在窗口函数中

   二是 RANK、DENSE_RANK等排序用的专用窗口函数

5. 专用窗口函数：

   **RANK函数**（英式排序）：计算排序时，如果存在相同位次的记录，则会跳过之后的位次。

   例：有 3 条记录排在第 1 位时：1 位、1 位、1 位、4 位……

   **DENSE_RANK函数**（中式排序）：同样是计算排序，即使存在相同位次的记录，也不会跳过之后的位次。

   例：有 3 条记录排在第 1 位时：1 位、1 位、1 位、2 位……

   **ROW_NUMBER函数**：赋予唯一的连续位次。

   例：有 3 条记录排在第 1 位时：1 位、2 位、3 位、4 位

   举例：

   ```sql
   SELECT  product_name
          ,product_type
          ,sale_price
          ,RANK() OVER (ORDER BY sale_price) AS ranking
          ,DENSE_RANK() OVER (ORDER BY sale_price) AS dense_ranking
          ,ROW_NUMBER() OVER (ORDER BY sale_price) AS row_num
     FROM product  
   ```

   ![图片](https://img.alicdn.com/imgextra/i1/O1CN01z73HeN1f4yhiQefvw_!!6000000003954-2-tps-655-252.png)

6. 聚合函数在窗口函数的应用

   ```sql
   SELECT  product_id
          ,product_name
          ,sale_price
          ,SUM(sale_price) OVER (ORDER BY product_id) AS current_sum
          ,AVG(sale_price) OVER (ORDER BY product_id) AS current_avg  
     FROM product;  
   ```

   ![图片](https://img.alicdn.com/imgextra/i1/O1CN01kuRiqt1r7ygelUfjJ_!!6000000005585-2-tps-961-375.png)

   ![图片](https://img.alicdn.com/imgextra/i2/O1CN010hwdM325CTC0Yy29a_!!6000000007490-2-tps-953-376.png)

   可以看出，聚合函数结果是，按我们指定的排序，这里是product_id，**当前所在行及之前所有的行**的合计或均值。即累计到当前行的聚合。

7. 应用 : 计算移动平均

   指定更加详细的**汇总范围**。该汇总范围成为**框架(frame)。**

   ```sql
   <窗口函数> OVER (ORDER BY <排序用列名>
                    ROWS n PRECEDING )  
                    
   <窗口函数> OVER (ORDER BY <排序用列名>
                    ROWS BETWEEN n PRECEDING AND n FOLLOWING)
   ```

   PRECEDING（“之前”）， 将框架指定为 “截止到之前 n 行”，加上自身行

   FOLLOWING（“之后”）， 将框架指定为 “截止到之后 n 行”，加上自身行

   BETWEEN 1 PRECEDING AND 1 FOLLOWING，将框架指定为 “之前1行” + “之后1行” + “自身”

   执行以下代码：

   ```sql
   SELECT  product_id
          ,product_name
          ,sale_price
          ,AVG(sale_price) OVER (ORDER BY product_id
                                  ROWS 2 PRECEDING) AS moving_avg
          ,AVG(sale_price) OVER (ORDER BY product_id
                                  ROWS BETWEEN 1 PRECEDING 
                                           AND 1 FOLLOWING) AS moving_avg  
     FROM product  
   ```

   结果：

   ROWS 2 PRECEDING：

   ![图片](https://img.alicdn.com/imgextra/i1/O1CN01l9qlat1JNN3u15JEj_!!6000000001016-2-tps-898-322.png)

   ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING：

   ![图片](https://img.alicdn.com/imgextra/i1/O1CN01aO6L4k1IiboQy4j3c_!!6000000000927-2-tps-920-323.png)

8. GROUPING运算符

   **ROLLUP - 计算合计及小计**

   GROUP BY 只能得到每个分类的小计，计算分类的合计可以用 ROLLUP关键字。

   ```sql
   SELECT  product_type
          ,regist_date
          ,SUM(sale_price) AS sum_price
     FROM product
    GROUP BY product_type, regist_date WITH ROLLUP  
   ```

   ![图片](https://img.alicdn.com/imgextra/i1/O1CN01a2wvRr20h5aecQ6Zq_!!6000000006880-2-tps-416-219.png)

   这里ROLLUP 对product_type, regist_date两列进行合计汇总。结果实际上有三层聚合，如下图 模块3是常规的 GROUP BY 的结果，需要注意的是衣服 有个注册日期为空的，这是本来数据就存在日期为空的，不是对衣服类别的合计； 模块2和1是 ROLLUP 带来的合计，模块2是对产品种类的合计，模块1是对全部数据的总计。

   ROLLUP 可以对多列进行汇总求小计和合计。

   ![图片](https://img.alicdn.com/imgextra/i4/O1CN01gvm1XU23SNifXBXR2_!!6000000007254-2-tps-577-361.png)

   

练习：

1. 请说出针对本章中使用的product（商品）表执行如下 SELECT 语句所能得到的结果。

   ```sql
   SELECT  product_id
          ,product_name
          ,sale_price
          ,MAX(sale_price) OVER (ORDER BY product_id) AS Current_max_price
     FROM product
   ```

   按product_id升序排列，计算截止到当前行的最高sale_price。

   

2. 继续使用product表，计算出按照登记日期（regist_date）升序进行排列的各日期的销售单价（sale_price）的总额。排序是需要将登记日期为NULL 的“运动 T 恤”记录排在第 1 位（也就是将其看作比其他日期都早）

   ```sql
   SELECT product_id,product_name,sale_price,SUM(sale_price) OVER PARTITION BY (ORDER BY regist_date NULLS FIRST) AS current_sum_price
   FROM product
   ```

   

3. 思考题

① 窗口函数不指定PARTITION BY的效果是什么？针对排序列进行全局排序

② 为什么说窗口函数只能在SELECT子句中使用？实际上，在ORDER BY 子句使用系统并不会报错。

SQL的执行顺序：FROM-WHERE-GROUP BY-HAVING-SELECT-ORDER BY
